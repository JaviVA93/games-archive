---
import BackSvg from "../../../components/Assets/BackSvg.astro";
import MetacriticSvg from "../../../components/Assets/MetacriticSvg.astro";

const { slug } = Astro.params;

const gameDataReq = await fetch(
    `https://api.rawg.io/api/games/${slug}?key=${import.meta.env.RAWG_API_KEY}`
);
const gameData = await gameDataReq.json();

const { name, background_image, metacritic, description, released, platforms } =
    gameData;
const platformsName = platforms.map((p: any) => p.platform.name);
const platformsNameStr = platformsName.join(", ");


const gameScreenshotsReq = await fetch(`https://api.rawg.io/api/games/${slug}/screenshots?key=${import.meta.env.RAWG_API_KEY}`)
const gameScreenshots = await gameScreenshotsReq.json()
console.log(gameScreenshots)

let images = '';
for (let i = 0; i < 3 && i < gameScreenshots.count; i++) {
    images += `<img src="${gameScreenshots.results[i].image}" alt="${name} screenshot ${i}" >` 
}


---

<main class="gamePage">
    <header>
        <a href="/">
            <BackSvg color="#FF7D00" />
            <span>
                Back to Home
            </span>
        </a>
        <h1>{name}</h1>
    </header>
    <div class="imagesContainer">
        <img src={background_image}
            class="mainImage"
            style=`view-transition-name: game-${slug}`
            alt=`${name} image`
        />
        <div class="gameScreenshots">
            <Fragment set:html={images} />
        </div>
    </div>
    <div class="gameContentWrapper">
        <ul class="gameData">
            <li>
                <span class="dataName">Metacritic:</span>
                <div style="display: flex; align-items: center; gap: 5px;">
                    <span class="dataValue">{metacritic}</span>
                    <MetacriticSvg className="metacriticSvg" />
                </div>
            </li>
            <li>
                <span class="dataName">Released:</span>
                <span class="dataValue">{released}</span>
            </li>
            <li>
                <span class="dataName">Platforms:</span>
                <span class="dataValue">{platformsNameStr}</span>
            </li>
        </ul>
        <div class="gameDescription">
            <Fragment set:html={description} />
        </div>
    </div>
</main>

<style is:inline>
    .gamePage {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: auto;
        padding: clamp(10px, 2.32px + 1.81vw, 24px);
        max-width: 1200px;
    }
    .gamePage header {
        display: flex;
        align-items: center;
        gap: 15px;
        width: 100%;
        justify-content: center;
        margin-bottom: 21px;
        overflow: hidden;

        view-transition-name: game-page-header;
    }
    .gamePage header a {
        display: flex;
        align-items: center;
        gap: 4px;
        text-decoration: none;
        color: var(--color-4);
        transition: transform 0.5s;
    }

    .gamePage header a:hover {
        transform: translateX(-10px);
    }
    .gamePage header a > span {
        white-space: nowrap;
    }
    .gamePage header h1 {
        margin: 0;
        color: var(--color-3);
    }

    .imagesContainer {
        display: grid;
        grid-template-columns: 80% 20%;
        gap: 15px;
    }

    .imagesContainer .mainImage {
        max-width: 100%;
        object-fit: cover;
        object-position: center;
        border-radius: 8px;
    }

    .gameScreenshots {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .gameScreenshots img {
        max-width: 200px;
        max-height: 200px;
        object-fit: cover;
        object-position: center;
        transition: all 0.25s;
        border-radius: 5px;

        animation: popUp 0.25s ease-out;
    }

    .gameScreenshots :not(img:nth-child(1)):active {
        transform: scale(2.5) translateX(-50px);
    }

    .gameScreenshots img:nth-child(1):active {
        transform: scale(2.5) translate(-50px, 25px);
    }

    .gameContentWrapper {
        display: grid;
        grid-template-columns: calc(20% - 20px) calc(80% - 20px);
        gap: 40px;
        margin-top: 20px;
    }

    .gameData {
        list-style-type: none;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .gameData li {
        display: flex;
        align-items: flex-start;
        gap: 5px;
    }

    .gameData li .dataValue {
        color: var(--color-2);
    }
    .gameData li .dataName {
        color: var(--color-5);
    }

    .metacriticSvg {
        width: 20px;
        height: 20px;
    }

    .gameDescription {
        max-width: 650px;
    }

    .gameDescription p:nth-child(1) {
        margin-top: 0;
    }

    @media screen and (max-width: 950px) {
        .imagesContainer {
            grid-template-columns: 100%;
        }
        .gameScreenshots {
            flex-direction: row;
        }
        .gameScreenshots img {
            max-width: 32%;
        }
        .gameContentWrapper {
            grid-template-columns: 100%;
            gap: 15px;
        }
    }

    @media screen and (max-width: 760px) {
        .gamePage header a > span {
            display: none;
        }
    }

    @keyframes popUp {
        from {
            opacity: 0;
            transform: scale(0);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

</style>
